# Controls when the workflow will run
on:
  # Allows you to run this workflow manually ftarget the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.output }}
    strategy:
      matrix:
        include:
          # - { buildtype: 'playdate', repo: 'joyrider3774/formula1_playdate',           runs-on: 'ubuntu-latest',  output: 'formula_1',            binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: 'FORMULA1_PLAYDATE_CODEKEY', codesecretfile: 'src/codekey.h', makecommand: '"SRC_C_DIR=src/srcgame src/srcgame/scoresubmit" SCREENRESX=320 SCREENRESY=240 SCALINGMODE=0'}
          # - { buildtype: 'playdate', repo: 'joyrider3774/checkers_playdate',           runs-on: 'ubuntu-latest',  output: 'checkers',             binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: 'CPP_BUILD=1 SCREENRESX=320 SCREENRESY=240 SCALINGMODE=0'}
          # - { buildtype: 'playdate', repo: 'joyrider3774/dynamate_playdate',           runs-on: 'ubuntu-latest',  output: 'dynamate',             binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: 'CPP_BUILD=1 SCREENRESX=320 SCREENRESY=240 SCALINGMODE=0'}
          # - { buildtype: 'playdate', repo: 'joyrider3774/blockdude_playdate',          runs-on: 'ubuntu-latest',  output: 'blockdude',            binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: ''}
          # - { buildtype: 'playdate', repo: 'joyrider3774/puztrix_playdate',            runs-on: 'ubuntu-latest',  output: 'puztrix',              binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: 'PUZTRIX_PLAYDATE_CODEKEY',  codesecretfile: 'src/codekey.h', makecommand: '"SRC_C_DIR=src/srcgame/scoresubmit/src/playdate/C_API/scoresubmit" "SRC_CPP_DIR=src/srcgame src/srcstub/sdl_rotate src/srcstub/gfx_primitives_surface src/srcstub/bump src/srcstub/bump/src src/srcstub src/srcstub/pd_api"'}
          # - { buildtype: 'playdate', repo: 'joyrider3774/puzzleland_playdate',         runs-on: 'ubuntu-latest',  output: 'puzzleland',           binarycopy: '',          assetscopy: '',            downloadsecret: 'PUZZLELAND_MUSIC', downloadsecretcmd: 'unzip download && mv music Source/music', codesecret: '',                          codesecretfile: '',              makecommand: '"SRC_C_DIR=src/srcgame src/srcgame/gameobjects src/srcgame/gamestates" SCREENRESX=320 SCREENRESY=240 SCALINGMODE=0'}
          # - { buildtype: 'playdate', repo: 'joyrider3774/rubido_playdate',             runs-on: 'ubuntu-latest',  output: 'rubido',               binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: ''}
          # - { buildtype: 'playdate', repo: 'joyrider3774/waternet_playdate',           runs-on: 'ubuntu-latest',  output: 'waternet',             binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: ''}
          # - { buildtype: 'playdate', repo: 'joyrider3774/retrotime_playdate',          runs-on: 'ubuntu-latest',  output: 'retrotime',            binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: 'RETROTIME_PLAYDATE_CODEKEY',codesecretfile: 'src/codekey.h', makecommand: '"SRC_C_DIR=src/srcgame src/srcgame/scoresubmit src/srcgame/games"'}
          # - { buildtype: 'vanilla',  repo: 'joyrider3774/Znax',                        runs-on: 'ubuntu-latest',  output: 'znax',                 binarycopy: 'znax',      assetscopy: 'znaxfs',      downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: 'CXX=/opt/funkey-sdk/bin/arm-funkey-linux-musleabihf-g++ NOX11=1 SDL2CONFIG=/opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/bin/sdl2-config LDLIBS="`/opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/bin/sdl2-config --libs` -lSDL2_image -lSDL2_ttf -lSDL2_mixer -lSDL2 -lSDL2_gfx -lpthread -lstdc++" "DEFINES=-DFUNKEY"'}
          # - { buildtype: 'vanilla',  repo: 'joyrider3774/crisp-game-lib-portable-sdl', runs-on: 'ubuntu-latest',  output: 'cglpsdl2',             binarycopy: 'cglpsdl2',  assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',              makecommand: '-f src/cglpSDL2/Makefile CC=/opt/funkey-sdk/bin/arm-funkey-linux-musleabihf-gcc NOX11=1 SDL_CONFIG=/opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/bin/sdl2-config LDLIBS="`/opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/bin/sdl2-config --libs` -lpthread -lm" "DEFINES=-DFUNKEY"'}
          - { buildtype: '32blit',   repo: 'ThePythonator/Super-Square-Bros',            runs-on: 'ubuntu-latest',   output: 'Super-Square-Bros',    binarycopy: '',          assetscopy: '',            downloadsecret: '',                 downloadsecretcmd: '',                                        codesecret: '',                          codesecretfile: '',    makecommand: ''}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - if:${{ matrix.buildtype == '32blit'}}
        name: Checkout Repo
        uses: actions/checkout@v4
      
      - if: ${{ matrix.buildtype != '32blit'}}
        name: get ffmpeg
        run: |
          sudo apt update
          sudo apt install ffmpeg
          
      - name: get SDK
        uses: wei/wget@v1
        with:
          args: -O funkey-sdk.tar.gz https://github.com/joyrider3774/sdks/releases/download/v1.0/funkey-sdk-sdl2.tar.gz

      - name: setup SDK
        run: |
          tar -xzvf ./funkey-sdk.tar.gz
          sudo mv ./funkey-sdk /opt/
          cd /opt/funkey-sdk
          ./relocate-sdk.sh
      
      - if: ${{ matrix.buildtype == '32blit'}}
        name: Checkout 32Blit sdk
        uses: actions/checkout@v2
        with:
          repository: 32blit/32blit-sdk
          path: 32blit-sdk
                
      - if: ${{ matrix.buildtype == '32blit'}}
        name: setup 32blit extras
        run: |
          cd ${{runner.workspace}}
          python3 -m venv 32blit
          source ${{runner.workspace}}/32blit/bin/activate
          python3 -m pip install setuptools
          python3 -m pip install 32blit 
          
      - if: ${{ matrix.buildtype == 'playdate'}}
        name: Checkout Playdate SDL2 Api Sources
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          repository: 'joyrider3774/Playdate_Api_SDL2'

      - name: Checkout game sources sources
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          repository: ${{matrix.repo}}
          path: tmp
      

      - if: ${{ (matrix.codesecret != '') && (matrix.codesecretfile != '')}}
        name: Setup Secret codekey.h File
        env: 
          SECRET: ${{secrets[matrix.codesecret] }}
        run : |
          echo "$SECRET" | base64 --decode >  tmp/${{matrix.codesecretfile}}
       
      - if: ${{ matrix.buildtype== 'playdate'}}
        name: move things to correct directories playdate
        run: |
          rm -rf ./src/srcgame
          mv tmp/src ./src/srcgame
          cp -Rf tmp/Source/. ./Source
     
      - if: ${{ (matrix.downloadsecret != '') && (matrix.downloadsecretcmd != '')}}
        name: run secret download
        uses: wei/wget@v1
        with:
          args: -O download ${{ secrets[matrix.downloadsecret] }}
      
      - if: ${{ (matrix.downloadsecret != '') && (matrix.downloadsecretcmd != '')}}
        name: run secret download cmd
        run: |
          ${{matrix.downloadsecretcmd}}
          rm download
      
      - if: ${{ matrix.buildtype == '32blit'}}
        name: Create 32blit Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/tmp/build
        
      - if: ${{ matrix.buildtype == '32blit'}}  
        name: Configure CMake 32blit
        working-directory: ${{runner.workspace}}/tmp/build
        run: |
          source ${{runner.workspace}}/32blit/bin/activate 
          cmake $GITHUB_WORKSPACE/tmp -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_FILE_NAME=${{ matrix.output}} -D32BLIT_DIR=$GITHUB_WORKSPACE/32blit-sdk -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/funkey_cmake/toolchainfile.cmake -DCMAKE_MODULE_PATH=$GITHUB_WORKSPACE/funkey_cmake/
      
      - if: ${{ matrix.buildtype == '32blit'}}  
        name: Build 32blit game
        working-directory: ${{runner.workspace}}/tmp/build
        shell: bash
        run: |
          source ${{runner.workspace}}/32blit/bin/activate
          cmake --build . --config Release
          
      - if: ${{ matrix.buildtype == 'playdate'}}   
        name: Build Game Playdate
        run: |          
          make PLATFORM=funkey-s DEFAULTSOURCEDIR=1 ${{matrix.makecommand }}
       
      - if: ${{ matrix.buildtype == 'vanilla'}}   
        name: Build Game Vanilla
        run: |
          cd tmp
          make ${{matrix.makecommand }}
           
      - name: prepare opk directory
        run: |
          mkdir opk
          mkdir opk/bin
          mkdir opk/lib
     
      - if: ${{ matrix.buildtype == 'playdate'}}
        name: replace wav with converted ogg files
        run: |
          find Source/. -name "*.wav" -type f -delete
          cp -r assets/. ./Source/
        
      - if: ${{ matrix.buildtype == 'playdate'}}
        name: copy Source Folder
        run: |
          cp -r Source/. "./opk/"
           
      - if: ${{ matrix.binarycopy != ''}}
        name: copy binary
        run: |
          cp "tmp/${{ matrix.binarycopy}}" "./opk/${{ matrix.binarycopy }}"
      
      - if: ${{ matrix.assetscopy != ''}}
        name: copy assets
        run: |
          cp -Rf "tmp/${{ matrix.assetscopy}}" "./opk/"
     
      - if: ${{ matrix.buildtype == '32blit'}}
        name: Package for ${{matrix.output}} 32blit game
        working-directory: ${{runner.workspace}}/tmp/build
        run: |
          source ${{runner.workspace}}/32blit/bin/activate
          cmake --build . --config Release --target package
          
      - if: ${{ matrix.buildtype == '32blit'}}
        name: Extract Package for ${{matrix.output}} 32blit game
        run: |
          cd opk
          tar -xzvf ${{runner.workspace}}/tmp/build/${{ matrix.output }}.tar.gz
          
      - name: Prepare desktopfile
        run: |
          echo "[Desktop Entry]" > "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Name=${{ matrix.output }}" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Comment=${{ matrix.output }}" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Terminal=false" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Type=Application" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Exec=game.sh" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Icon=icon" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
          echo "Categories=games" >> "./opk/${{ matrix.output }}.funkey-s.desktop"
      
      - if: ${{ matrix.buildtype == 'playdate'}}
        name: Copy icon playdate games
        run: |
          cp ./opk/metadata/icon.png ./opk/icon.png
      
      - if: ${{(matrix.buildtype != '32blit') && (matrix.buildtype != 'playdate') && (matrix.output != 'cglpsdl2') }}
        name: Copy icon other games
        run: |
          cp tmp/metadata/funkey-s/icon.png ./opk/icon.png

      - if: ${{ (matrix.output == 'cglpsdl2') }}
        name: Copy icon other games
        run: |
          cp tmp/metadata/icon.png ./opk/icon.png
            
      - name: create game.sh general stuff
        run: |
          echo "#!/bin/sh" > "./opk/game.sh"
          echo "export LD_LIBRARY_PATH=\"./lib:./lib/directfb-1.7-7:./lib/directfb-1.7-7/systems:./lib/directfb-1.7-7/wm:./lib/directfb-1.7-7/interfaces/IDirectFBFont:./lib/directfb-1.7-7/interfaces/IDirectFBImageProvider:./lib/directfb-1.7-7/interfaces/IDirectFBVideoProvider:./lib/directfb-1.7-7/inputdrivers:./lib/directfb-1.7-7/gfxdrivers:\$LD_LIBRARY_PATH\"" >> "./opk/game.sh"
          echo "export PATH=\"./bin:\$PATH\"" >> "./opk/game.sh"
          echo "export export D_ARGS=\"module-dir=./lib/directfb-1.7-7,system=fbdev,fbdev=/dev/fb0,no-linux-input-grab,no-cursor\"" >> "./opk/game.sh"
          echo "unset AUDIODEV" >> "./opk/game.sh"
 
      - if: ${{ matrix.buildtype == 'playdate'}}
        name: continue create game.sh playdate games
        run: |
          echo "./game -f" >> "./opk/game.sh"
          chmod +x "./opk/game.sh"

      - if: ${{ matrix.output == 'znax'}}
        name: continue create game.sh for ${{matrix.output}} game
        run: |
          echo "./${{ matrix.output }} -r" >> "./opk/game.sh"
          chmod +x "./opk/game.sh"
          
      - if: ${{ matrix.buildtype == '32blit'}}
        name: continue create game.sh for ${{matrix.output}} game
        run: |
          echo "./${{ matrix.output }}" >> "./opk/game.sh"
          chmod +x "./opk/game.sh"

      - if: ${{ matrix.output == 'cglpsdl2'}}
        name: continue create game.sh for ${{matrix.output}} game
        run: |
          echo "./${{ matrix.output }} -f" >> "./opk/game.sh"
          chmod +x "./opk/game.sh"      
        
      - name: Copy SDL2 and Directfb libs and files
        run: |
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/lib++dfb** ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/libvorbisidec* ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/libts* ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/*SDL2* ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/*fusion* ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/*direct* ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/lib/directfb-1.7-7 ./opk/lib/
          cp -r /opt/funkey-sdk/arm-funkey-linux-musleabihf/sysroot/usr/bin/dfb* ./opk/bin
          
      - name: create opk
        run: |
          mksquashfs ./opk ${{ matrix.output }}.opk -all-root -noappend -no-exports -no-xattrs
    
      - name: Store build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }} - Funkey-s
          path: ${{ matrix.output }}.opk
